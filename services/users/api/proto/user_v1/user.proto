syntax = "proto3";

package api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "dzhordano/132market/services/users/internal/interface/api/grpc/pb/user_v1;user_v1";

service UserServiceV1 {
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    rpc FindUserById(FindUserByIdRequest) returns (FindUserByIdResponse);
    rpc FindUserByEmail(FindUserByEmailRequest) returns (FindUserByEmailResponse);
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
    rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);

    // Methods offered by ai, valid? I guess useful...
    rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse);
    rpc SetUserState(SetUserStateRequest) returns (google.protobuf.Empty);
    rpc UpdateLastSeen(UpdateLastSeenRequest) returns (google.protobuf.Empty);
    rpc CheckUserExists(CheckUserExistsRequest) returns (CheckUserExistsResponse);
}

message User {
    string id = 1;
    string name = 2;
    string email = 3;
    repeated string roles = 4;
    string status = 5;
    string state = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp last_seen_at = 8;
}

message UserInfo {
    string name = 1;
    string email = 2;
}

message CreateUserRequest {
    UserInfo info = 1;
}

// TODO МБ убрать возврат фулл инфы юзера, мб норм...
message CreateUserResponse {
    User user = 1;
}

message UpdateUserRequest {
    string id = 1;
    UserInfo info = 2;
}

message UpdateUserResponse {
    User user = 1;
}

message FindUserByIdRequest {
    string id = 1;
}

message FindUserByIdResponse {
    User user = 1;
}

message FindUserByEmailRequest {
    string email = 1;
}

message FindUserByEmailResponse {
    User user = 1;
}

message ListUsersRequest {
    uint64 offset = 1;
    uint64 limit = 2;
    map<string, string> filters = 3;
}

message ListUsersResponse {
    repeated User users = 1;
    uint64 total_count = 2;
}

message DeleteUserRequest {
    string id = 1;
}

// TODO
message SearchUsersRequest {
    string query = 1;
    uint64 offset = 2;
    uint64 limit = 3;
}

message SearchUsersResponse {
    repeated User users = 1;
}

message SetUserStateRequest {
    string id = 1;
    string state = 2;
}

message UpdateLastSeenRequest {
    string id = 1;
}

message CheckUserExistsRequest {
    string email = 1;
}

message CheckUserExistsResponse {
    bool exists = 1;
}