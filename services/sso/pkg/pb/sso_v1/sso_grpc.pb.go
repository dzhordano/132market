// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: sso.proto

package sso_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthenticationV1_Register_FullMethodName      = "/api.AuthenticationV1/Register"
	AuthenticationV1_Login_FullMethodName         = "/api.AuthenticationV1/Login"
	AuthenticationV1_RefreshTokens_FullMethodName = "/api.AuthenticationV1/RefreshTokens"
)

// AuthenticationV1Client is the client API for AuthenticationV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationV1Client interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RefreshTokens(ctx context.Context, in *RefreshTokensRequest, opts ...grpc.CallOption) (*RefreshTokensResponse, error)
}

type authenticationV1Client struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationV1Client(cc grpc.ClientConnInterface) AuthenticationV1Client {
	return &authenticationV1Client{cc}
}

func (c *authenticationV1Client) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthenticationV1_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationV1Client) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthenticationV1_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationV1Client) RefreshTokens(ctx context.Context, in *RefreshTokensRequest, opts ...grpc.CallOption) (*RefreshTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokensResponse)
	err := c.cc.Invoke(ctx, AuthenticationV1_RefreshTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationV1Server is the server API for AuthenticationV1 service.
// All implementations must embed UnimplementedAuthenticationV1Server
// for forward compatibility.
type AuthenticationV1Server interface {
	Register(context.Context, *RegisterRequest) (*emptypb.Empty, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	RefreshTokens(context.Context, *RefreshTokensRequest) (*RefreshTokensResponse, error)
	mustEmbedUnimplementedAuthenticationV1Server()
}

// UnimplementedAuthenticationV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthenticationV1Server struct{}

func (UnimplementedAuthenticationV1Server) Register(context.Context, *RegisterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthenticationV1Server) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthenticationV1Server) RefreshTokens(context.Context, *RefreshTokensRequest) (*RefreshTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokens not implemented")
}
func (UnimplementedAuthenticationV1Server) mustEmbedUnimplementedAuthenticationV1Server() {}
func (UnimplementedAuthenticationV1Server) testEmbeddedByValue()                          {}

// UnsafeAuthenticationV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationV1Server will
// result in compilation errors.
type UnsafeAuthenticationV1Server interface {
	mustEmbedUnimplementedAuthenticationV1Server()
}

func RegisterAuthenticationV1Server(s grpc.ServiceRegistrar, srv AuthenticationV1Server) {
	// If the following call pancis, it indicates UnimplementedAuthenticationV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthenticationV1_ServiceDesc, srv)
}

func _AuthenticationV1_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationV1Server).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationV1_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationV1Server).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationV1_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationV1Server).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationV1_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationV1Server).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationV1_RefreshTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationV1Server).RefreshTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationV1_RefreshTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationV1Server).RefreshTokens(ctx, req.(*RefreshTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationV1_ServiceDesc is the grpc.ServiceDesc for AuthenticationV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AuthenticationV1",
	HandlerType: (*AuthenticationV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthenticationV1_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthenticationV1_Login_Handler,
		},
		{
			MethodName: "RefreshTokens",
			Handler:    _AuthenticationV1_RefreshTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}

const (
	AuthorizationV1_GetUserPermissions_FullMethodName = "/api.AuthorizationV1/GetUserPermissions"
	AuthorizationV1_GetUserRoles_FullMethodName       = "/api.AuthorizationV1/GetUserRoles"
	AuthorizationV1_AssignRoleToUser_FullMethodName   = "/api.AuthorizationV1/AssignRoleToUser"
	AuthorizationV1_RevokeRoleFromUser_FullMethodName = "/api.AuthorizationV1/RevokeRoleFromUser"
)

// AuthorizationV1Client is the client API for AuthorizationV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationV1Client interface {
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error)
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	AssignRoleToUser(ctx context.Context, in *AssignRoleToUserRequest, opts ...grpc.CallOption) (*AssignRoleToUserResponse, error)
	RevokeRoleFromUser(ctx context.Context, in *RevokeRoleFromUserRequest, opts ...grpc.CallOption) (*RevokeRoleFromUserResponse, error)
}

type authorizationV1Client struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationV1Client(cc grpc.ClientConnInterface) AuthorizationV1Client {
	return &authorizationV1Client{cc}
}

func (c *authorizationV1Client) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, AuthorizationV1_GetUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationV1Client) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, AuthorizationV1_GetUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationV1Client) AssignRoleToUser(ctx context.Context, in *AssignRoleToUserRequest, opts ...grpc.CallOption) (*AssignRoleToUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignRoleToUserResponse)
	err := c.cc.Invoke(ctx, AuthorizationV1_AssignRoleToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationV1Client) RevokeRoleFromUser(ctx context.Context, in *RevokeRoleFromUserRequest, opts ...grpc.CallOption) (*RevokeRoleFromUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeRoleFromUserResponse)
	err := c.cc.Invoke(ctx, AuthorizationV1_RevokeRoleFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationV1Server is the server API for AuthorizationV1 service.
// All implementations must embed UnimplementedAuthorizationV1Server
// for forward compatibility.
type AuthorizationV1Server interface {
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	AssignRoleToUser(context.Context, *AssignRoleToUserRequest) (*AssignRoleToUserResponse, error)
	RevokeRoleFromUser(context.Context, *RevokeRoleFromUserRequest) (*RevokeRoleFromUserResponse, error)
	mustEmbedUnimplementedAuthorizationV1Server()
}

// UnimplementedAuthorizationV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorizationV1Server struct{}

func (UnimplementedAuthorizationV1Server) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedAuthorizationV1Server) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedAuthorizationV1Server) AssignRoleToUser(context.Context, *AssignRoleToUserRequest) (*AssignRoleToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoleToUser not implemented")
}
func (UnimplementedAuthorizationV1Server) RevokeRoleFromUser(context.Context, *RevokeRoleFromUserRequest) (*RevokeRoleFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeRoleFromUser not implemented")
}
func (UnimplementedAuthorizationV1Server) mustEmbedUnimplementedAuthorizationV1Server() {}
func (UnimplementedAuthorizationV1Server) testEmbeddedByValue()                         {}

// UnsafeAuthorizationV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationV1Server will
// result in compilation errors.
type UnsafeAuthorizationV1Server interface {
	mustEmbedUnimplementedAuthorizationV1Server()
}

func RegisterAuthorizationV1Server(s grpc.ServiceRegistrar, srv AuthorizationV1Server) {
	// If the following call pancis, it indicates UnimplementedAuthorizationV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorizationV1_ServiceDesc, srv)
}

func _AuthorizationV1_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationV1Server).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationV1_GetUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationV1Server).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationV1_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationV1Server).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationV1_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationV1Server).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationV1_AssignRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationV1Server).AssignRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationV1_AssignRoleToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationV1Server).AssignRoleToUser(ctx, req.(*AssignRoleToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationV1_RevokeRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRoleFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationV1Server).RevokeRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationV1_RevokeRoleFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationV1Server).RevokeRoleFromUser(ctx, req.(*RevokeRoleFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationV1_ServiceDesc is the grpc.ServiceDesc for AuthorizationV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AuthorizationV1",
	HandlerType: (*AuthorizationV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPermissions",
			Handler:    _AuthorizationV1_GetUserPermissions_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _AuthorizationV1_GetUserRoles_Handler,
		},
		{
			MethodName: "AssignRoleToUser",
			Handler:    _AuthorizationV1_AssignRoleToUser_Handler,
		},
		{
			MethodName: "RevokeRoleFromUser",
			Handler:    _AuthorizationV1_RevokeRoleFromUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}

const (
	ValidationV1_ValidateToken_FullMethodName = "/api.ValidationV1/ValidateToken"
)

// ValidationV1Client is the client API for ValidationV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidationV1Client interface {
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
}

type validationV1Client struct {
	cc grpc.ClientConnInterface
}

func NewValidationV1Client(cc grpc.ClientConnInterface) ValidationV1Client {
	return &validationV1Client{cc}
}

func (c *validationV1Client) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, ValidationV1_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidationV1Server is the server API for ValidationV1 service.
// All implementations must embed UnimplementedValidationV1Server
// for forward compatibility.
type ValidationV1Server interface {
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	mustEmbedUnimplementedValidationV1Server()
}

// UnimplementedValidationV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedValidationV1Server struct{}

func (UnimplementedValidationV1Server) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedValidationV1Server) mustEmbedUnimplementedValidationV1Server() {}
func (UnimplementedValidationV1Server) testEmbeddedByValue()                      {}

// UnsafeValidationV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidationV1Server will
// result in compilation errors.
type UnsafeValidationV1Server interface {
	mustEmbedUnimplementedValidationV1Server()
}

func RegisterValidationV1Server(s grpc.ServiceRegistrar, srv ValidationV1Server) {
	// If the following call pancis, it indicates UnimplementedValidationV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ValidationV1_ServiceDesc, srv)
}

func _ValidationV1_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationV1Server).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationV1_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationV1Server).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidationV1_ServiceDesc is the grpc.ServiceDesc for ValidationV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidationV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ValidationV1",
	HandlerType: (*ValidationV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateToken",
			Handler:    _ValidationV1_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}
